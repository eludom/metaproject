#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:nil p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Metaproject Project
#+DATE: <2016-08-30 09:50:03 Tuesday>
#+AUTHOR: George M Jones
#+EMAIL: gmj@pobox.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.50.1 (Org mode 8.3.4)

* metaproject - project info
* metaproject - info and planning
** DONE Write up project description
   [2016-02-28 Sun]
   [[file:README.org]]
** TODO Figure out how to handle differing scopes within files and projects
   - Current setup assumes a project is the unit of granularity for
     access control.
** Experiment with tags
   - [X] Are tags inherited ? YES
   - [X] Are tags case sensitive? YES
   - [ ] "cogita,fac,dic" for my way of working
   - [ ] Do my projects fit OODA loop
** Experiment with order of top level headlines
   - [X] Possibly follow cogita, fac, dic order
   - [X] "Info" becomes "Info and Planning" and goes first
   - [X] "Meetings" becomes "Communication" to cover things like
     email, conversations, etc.   Which would mean meetings for
     planning could fall under "Info and Plannning"
   
* metaproject - action items
** DONE Rename THIS file and categorize it in the new system
   SCHEDULED: <2016-02-27 Sat>
** [3/3] IN-PROGRESS select git repos
   :LOGBOOK:
   CLOCK: [2016-02-27 Sat 06:16]--[2016-02-27 Sat 06:16] =>  0:00
   :END:
   [2016-02-27 Sat 06:16]
   - [X] choose secret repo
   - [X] choose private repo
   - [X] choose public repo : github/eludom

** DONE Start re-organizing all my projects/git repos along these lines
** DONE Migrate ~/projects and ~/git projects to new format as I touch files
   :LOGBOOK:
   CLOCK: [2016-02-27 Sat 06:15]--[2016-02-27 Sat 06:15] =>  0:00
   :END:
   [2016-02-27 Sat 06:15]
   [[file:~/projects][file:~/projects]]
** DONE figure out which repos I am activly using
   #+begin_example
   find ~ -type d -mtime -180 -name .git
   #+end_example
** DONE figure out which repos I am not activly using, archive somehow?
   #+begin_example
   find ~ -type d -mtime +179 -name .git
   #+end_example

** DONE start syncing incrementally to new git repos
   :LOGBOOK:
   CLOCK: [2016-02-27 Sat 07:17]--[2016-02-27 Sat 07:17] =>  0:00
   :END:
   [2016-02-27 Sat 07:17]
   [[file:~/home/private/.ssh/install.sh][file:~/home/private/.ssh/install.sh]]
** IN-PROGRESS sync everything with my org dashboard
   :LOGBOOK:
   CLOCK: [2016-02-27 Sat 06:16]--[2016-02-27 Sat 06:16] =>  0:00
   :END:
   [2016-02-27 Sat 06:16]
   [[file:~/projects][file:~/projects]]
** DONE figure out what to to do with ~/secrets and ~/configs	       :oodA:
   - sync to codecommit
   - CAVEAT:  code-commit has a single top level namespace within an account,
   hence if I use the same AWS account for both secrets and private I
   will have to deconflict repository names by hand.  Since github is
   a differetn namespace, I can have the same repo name there and in
   secret or private (e.g. "org-git-dashboard" in both)


** IN-PROGRESS Create projects file to be my emacs "homepage"
   :LOGBOOK:
   CLOCK: [2016-08-30 Tue 09:31]--[2016-08-30 Tue 09:31] =>  0:00
   :END:
   [2016-08-30 Tue 09:31]
   [[file:~/home/private/Org/projects.org::*Earlier%20thoughts][Earlier thoughts]]
** TODO Autogenerate projects lists from org-agenda-files variable
   :LOGBOOK:
   CLOCK: [2016-08-30 Tue 09:32]--[2016-08-30 Tue 09:33] =>  0:01
   :END:
   [2016-08-30 Tue 09:32]
   [[file:~/home/private/Org/projects.org::*Projects][Projects]]
* metaproject - reporting
** DONE Check this meta-project into github


